            /*string sqlCmd = "SELECT attname, atttypid " +
                            "FROM pg_attribute, pg_class " +
                            "WHERE attrelid = pg_class.oid " +
                            "AND relname = '" + sTabName + "' " +
                            "AND attstattarget <> 0; ";*/




aspnet_regsql


            Stopwatch stopwatch = Stopwatch.StartNew(); //creates and start the instance of Stopwatch
            connection = new NpgsqlConnection(connstring);
            connection.Open();
            stopwatch.Stop();
            Console.WriteLine(stopwatch.ElapsedMilliseconds);


XmlDocument Doc = new XmlDocument();
XmlDeclaration deklarace = Doc.CreateXmlDeclaration("1.0", "utf-8", null);
Doc.AppendChild(deklarace);
XmlElement koren = Doc.CreateElement("loaders");

XmlElement elm = Doc.CreateElement("taskProps");
elm.SetAttribute("run", "Yes");
elm.SetAttribute("taskName", "Dubravica");
koren.AppendChild(elm);

Doc.AppendChild(koren);
Doc.Save(FullName);



            #region test
            /*
            Priznaky PP = 0;
            PP = Priznaky.Prvni;
            PP |= Priznaky.Druha;

            if (PP.HasFlag(Priznaky.Treti)) {

            }

            String S = PP.ToString();

            Byte B = (Byte)PP;
            */


    [Flags]
    public enum Priznaky : Byte {
        Prvni = 1,
        Druha = 2,
        Treti = 4
    }



	        public event PropertyChangedEventHandler PropertyChanged;         // implement the "Property changed" mechanism

        // normalne se tato metoda vola v kazdem setteru, my ji volame hromadne z RefreshAllDlgItem
        protected void OnPropertyChanged(string vlastnost) {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(vlastnost));
        }


        /// <summary> force all Dlg items to be redrawn </summary>
        public void RefreshAllDlgItems() {
            var propsInfo = this.GetType().GetProperties();
            foreach (System.Reflection.PropertyInfo info in propsInfo) {
                OnPropertyChanged(info.Name);
            } 
        }


        <TextBox Text="{Binding iTimeoutMs,StringFormat=N0}"  HorizontalAlignment="Left" Height="23" Margin="136,62,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="67"/>



